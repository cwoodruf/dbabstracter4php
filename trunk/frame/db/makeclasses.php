<?php
/**
 * makeclasses.php - turn the output of mysql2schema.pl into a set of base classes for oop access to a db
 *
 * external variables: 
 * schemafile - name of file generated by mysql2schema.pl, 
 * modeldir - directory where class files go, 
 * thistable - set if you only want to rebuild one table
 * force - set only if you want to overwrite files
 *
 * one way to run it: php -r '$schemafile = "..."; $modeldir = "..."; require("makeclasses.php");'
 * or use it in a web script
 */

if (!isset($schemafile)) 
	die("you need to define \$schemafile!\n");
if (!isset($modeldir)) 
	die("you need to define \$modeldir!\n");

require($schemafile);

# comment out this file_exists check to overwrite files automatically
if (!$force and file_exists($modeldir)) die("models directory $modeldir exists - aborting!\n");

if (!is_dir($modeldir)) mkdir($modeldir,0777,true);

$dbclass = ucfirst($dbname).'DB';
$dbfile = "$modeldir/$dbname".'_db.php';
$generatedby = '# automatically generated by makeclasses.php';

# if we only want to rebuild one table we truncate schema
if (isset($thistable)) {
	$schema = array( $thistable => $schema[$thistable], );

# otherwise make a stub for db login information
} else {
	if (($fh = fopen($dbfile,'w')) !== false) {
		$classdef = <<<PHP
<?php
$generatedby

class $dbclass {
	public static \$db = array(
		'db' => '$dbname',
		'host' => '$dbhost',
		'login' => DBLOGIN,
		'pw' => DBPW,
	);
}

PHP;
		fwrite($fh,$classdef);
		fclose($fh);

	} else {
		die("can't open $dbfile!");
	}
}

# go through schema and make classes
foreach ($schema as $table => $fields) {
	$class = ucfirst($table);
	$tbschema = indent_var_export(var_export($schema[$table],true),($multiline=true));
	$baseattribs = <<<PHP

	# where this class comes from
	public \$dbname = '$dbname';
	public \$dbhost = '$dbhost';
	public \$table = '$table';

	# login information
	private \$db;

	# for building forms
	public \$schema = $tbschema;

PHP;
	if (isset($schema['PRIMARY KEY'])) {
		$classdef = <<<PHP
<?php
$generatedby

class {$class}Relation extends Relation {
$baseattribs
	function __construct() {
		\$this->db = $dbclass::\$db;
		parent::__construct(\$this->db, \$this->schema, \$this->table);
	}
}

PHP;
	} else {
		$classdef = <<<PHP
<?php
$generatedby

class {$class}Entity extends Entity {
$baseattribs
	function __construct() {
		\$this->db = $dbclass::\$db;
		parent::__construct(\$this->db, \$this->schema, \$this->table);
	}
}

PHP;
	}
	if (($fh = fopen("$modeldir/{$table}_base.php",'w')) !== false) {
		fwrite($fh,$classdef);
		fclose($fh);
	} else {
		die("can't open $modeldir/$table.php to write!");
	}
}

function indent_var_export($php,$multiline=false) {
	$php = preg_replace("#\s+#m"," ",$php);
	if ($multiline) {
		$php = preg_replace("#('[\w ]+' => array)#","\n\t\t$1",$php);
		$php = preg_replace("#\)$#","\n\t)",$php);
	}
	return $php;
}
